# .github/workflows/deploy-github-pages.yml
name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
    # 특정 폴더의 변경사항만 감지 (선택사항)
    paths:
      - '03-developer-blog/**'
  workflow_dispatch: # 수동 실행 허용

# GitHub Pages 배포를 위한 권한 설정
permissions:
  contents: read
  pages: write
  id-token: write

# 동시 배포 방지
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # 빌드 작업
  build:
    name: Build Next.js Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          # 프로젝트 폴더의 package.json 기준으로 캐시
          cache-dependency-path: '03-developer-blog/package.json'

      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          # Next.js의 정적 export를 위한 설정
          static_site_generator: next

      - name: Install dependencies
        working-directory: ./03-developer-blog
        run: npm ci

      - name: Type check
        working-directory: ./03-developer-blog
        run: npm run type-check

      - name: Lint check
        working-directory: ./03-developer-blog
        run: npm run lint

      - name: Build with Next.js
        working-directory: ./03-developer-blog
        run: npm run build
        env:
          # GitHub Pages 환경 변수 설정
          NODE_ENV: production
          NEXT_PUBLIC_BASE_URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}

      - name: Create .nojekyll file
        working-directory: ./03-developer-blog/out
        run: touch .nojekyll

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./03-developer-blog/out

  # 배포 작업
  deploy:
    name: Deploy to GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # 배포 후 검증 (선택사항)
  verify:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    steps:
      - name: Check deployment
        run: |
          echo "🚀 Deployment successful!"
          echo "📱 Site URL: ${{ needs.deploy.outputs.page_url }}"
          
      - name: Test site accessibility
        run: |
          # 배포된 사이트가 접근 가능한지 확인
          sleep 30  # GitHub Pages 전파 대기
          curl -f ${{ needs.deploy.outputs.page_url }} || exit 1
          echo "✅ Site is accessible"

      - name: Notify success
        run: |
          echo "::notice title=Deployment Success::TypeScript Next.js site deployed to GitHub Pages successfully!"